// [Problem 2]: (https://projecteuler.net/problem=2)
// - - - - - - - - - - - - - - - - - - - - - - - - -
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms.
extern crate algorithm;
use algorithm::fibonacci::fibonacci;


fn sum_fibonacci(bound: u64) -> u64 {
    let mut sum = 0;
    for i in fibonacci().take_while(|&n| n < bound).filter(|&n| n % 2 == 0){
        sum += i;
    }
    sum
}

fn main() {
    println!("{:?}", sum_fibonacci(4000000));
}

#[test]
fn example() {
    assert_eq!(10, sum_fibonacci(10));
}
