// [Problem 12]: (https://projecteuler.net/problem=12)
// - - - - - - - - - - - - - - - - - - - - - - - - - -
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
//     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//    10: 1,2,5,10
//    15: 1,3,5,15
//    21: 1,3,7,21
//    28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred
// divisors?
extern crate algorithm;
extern crate num;

use num::integer::Integer;
use std::mem;

// Triangular numbers sequence iterator.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pub struct TriangularNums {
    diff: u64,
    next: u64,
}

impl TriangularNums {
    pub fn new() -> TriangularNums {
        TriangularNums { diff: 2, next: 1 }
    }
}

impl Iterator for TriangularNums {
    type Item = u64;

    fn next(&mut self) -> Option<u64> {
        let new_next = self.next + self.diff;
        self.diff += 1;
        Some(mem::replace(&mut self.next, new_next))
    }
}

// Functions
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

fn divisor_set_len(value: u64) -> usize {
    let cnt = (2..value/2).filter(|x| value.is_multiple_of(x)).count();
    cnt + 2
}

fn solve(limit: usize) -> u64 {
    TriangularNums::new()
        .skip_while(|&t| divisor_set_len(t) < limit)
        .next()
        .unwrap()
}

fn main() {
    println!("{:?}", solve(500));
}

#[test]
fn example() {
    assert_eq!(28,solve(5));
}
